// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  username       String   @unique
  email          String   @unique
  fullName       String
  studentId      String   @default("TBD")
  phone          String   @default("000-000-0000")
  password       String
  role           Role     @default(STUDENT)
  profilePicture String?
  createdAt      DateTime @default(now())

  // Relations
  transactions Transaction[]
  bookRequests BookRequest[]
  notifications Notification[]
  extensionRequests ExtensionRequest[]

  @@map("users")
}

model Book {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  author          String
  isbn            String?
  category        String
  description     String?
  publisher       String?
  totalCopies     Int
  availableCopies Int
  createdAt       DateTime @default(now())

  // Relations
  transactions Transaction[]
  bookRequests BookRequest[]

  @@map("books")
}

model Transaction {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  userId       String            @db.ObjectId
  bookId       String            @db.ObjectId
  borrowedDate DateTime          @default(now())
  dueDate      DateTime
  returnedDate DateTime?
  status       TransactionStatus @default(BORROWED)

  // Relations
  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
  extensionRequests ExtensionRequest[]

  @@map("transactions")
}

model BookRequest {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  userId      String            @db.ObjectId
  bookId      String            @db.ObjectId
  requestDate DateTime          @default(now())
  status      BookRequestStatus @default(PENDING)
  requestedBy String            // Student name/ID for easier identification
  notes       String?           // Optional notes from student

  // Relations
  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@map("book_requests")
}

model Notification {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  userId    String            @db.ObjectId
  type      NotificationType
  title     String
  message   String
  isRead    Boolean           @default(false)
  createdAt DateTime          @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model ExtensionRequest {
  id              String                  @id @default(auto()) @map("_id") @db.ObjectId
  transactionId   String                  @db.ObjectId
  userId          String                  @db.ObjectId
  requestDate     DateTime                @default(now())
  currentDueDate  DateTime
  requestedDueDate DateTime
  reason          String?
  status          ExtensionRequestStatus  @default(PENDING)
  processedBy     String?                 // Librarian who processed the request
  processedDate   DateTime?

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@map("extension_requests")
}

enum Role {
  STUDENT
  LIBRARIAN
  ADMIN
}

enum TransactionStatus {
  BORROWED
  RETURNED
  OVERDUE
}

enum BookRequestStatus {
  PENDING
  APPROVED
  REJECTED
  FULFILLED
}

enum NotificationType {
  BOOK_BORROWED
  BOOK_RETURNED
  BOOK_DUE_SOON
  BOOK_OVERDUE
  BOOK_REQUEST_REJECTED
  EXTENSION_REQUEST_APPROVED
  EXTENSION_REQUEST_REJECTED
}

enum ExtensionRequestStatus {
  PENDING
  APPROVED
  REJECTED
}